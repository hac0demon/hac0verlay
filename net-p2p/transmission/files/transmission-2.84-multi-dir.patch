diff -Naur transmission-2.84_/daemon/daemon.c transmission-2.84/daemon/daemon.c
--- transmission-2.84_/daemon/daemon.c	2014-07-01 10:10:39.414913066 -0700
+++ transmission-2.84/daemon/daemon.c	2015-10-03 20:18:40.078571337 -0700
@@ -11,6 +11,8 @@
 #include <stdio.h> /* printf */
 #include <stdlib.h> /* exit, atoi */
 
+#include <dirent.h> /* dirent, scandir */
+#include <string.h> 
 #include <fcntl.h> /* open */
 #include <signal.h>
 #ifdef HAVE_SYSLOG
@@ -67,6 +69,7 @@
 static FILE *logfile = NULL;
 static tr_session * mySession = NULL;
 static tr_quark key_pidfile = 0;
+static int numberOfWatchdirs = 0;
 static struct event_base *ev_base = NULL;
 
 /***
@@ -95,6 +98,7 @@
     { 'B', "no-blocklist", "Disable peer blocklists", "B", 0, NULL },
     { 'c', "watch-dir", "Where to watch for new .torrent files", "c", 1, "<directory>" },
     { 'C', "no-watch-dir", "Disable the watch-dir", "C", 0, NULL },
+    { 989, "watch-dir-suffix-enabled", "Enable the watch-dir suffix", NULL, 0, NULL },
     { 941, "incomplete-dir", "Where to store new torrents until they're complete", NULL, 1, "<directory>" },
     { 942, "no-incomplete-dir", "Don't store incomplete torrents in a different location", NULL, 0, NULL },
     { 'd', "dump-settings", "Dump the settings and exit", "d", 0, NULL },
@@ -260,11 +264,22 @@
 }
 
 static void
-onFileAdded (tr_session * session, const char * dir, const char * file)
+onFileAdded (tr_session * session, const char * dir, const char * file, const void *callbackArgument)
 {
     char * filename = tr_buildPath (dir, file, NULL);
     tr_ctor * ctor = tr_ctorNew (session);
-    int err = tr_ctorSetMetainfoFromFile (ctor, filename);
+    int err;
+    if(callbackArgument != NULL) 
+    { 
+        const char *downloadDir; 
+        char *newPath; 
+        tr_ctorGetDownloadDir(ctor, TR_FALLBACK, &downloadDir); 
+        newPath = tr_strdup_printf("%s%s", downloadDir, (const char *)callbackArgument); 
+        tr_logAddInfo("Change download dir from %s to %s", downloadDir, newPath); 
+        tr_ctorSetDownloadDir(ctor, TR_FORCE, newPath); 
+        tr_free(newPath); 
+    }
+    err = tr_ctorSetMetainfoFromFile (ctor, filename);
 
     if (!err)
     {
@@ -358,9 +373,13 @@
 }
 
 static void
-periodicUpdate (evutil_socket_t fd UNUSED, short what UNUSED, void *watchdir)
+periodicUpdate (evutil_socket_t fd UNUSED, short what UNUSED, void *ptr)
 {
-    dtr_watchdir_update (watchdir);
+    dtr_watchdir ** watchdir=(struct dtr_watchdir **)ptr;
+    for(int c=0; c<numberOfWatchdirs; c++)
+    {
+        dtr_watchdir_update( watchdir[c] );
+    }
 
     pumpLogMessages (logfile);
 
@@ -390,7 +409,7 @@
     bool dumpSettings = false;
     const char * configDir = NULL;
     const char * pid_filename;
-    dtr_watchdir * watchdir = NULL;
+    dtr_watchdir ** watchdir = NULL;
     bool pidfile_created = false;
     tr_session * session = NULL;
     struct event *status_ev;
@@ -425,6 +444,8 @@
                       break;
             case 'C': tr_variantDictAddBool (&settings, TR_KEY_watch_dir_enabled, false);
                       break;
+            case 989: tr_variantDictAddBool (&settings, TR_KEY_watch_dir_suffix_enabled, true);
+                      break;
             case 941: tr_variantDictAddStr  (&settings, TR_KEY_incomplete_dir, optarg);
                       tr_variantDictAddBool (&settings, TR_KEY_incomplete_dir_enabled, true);
                       break;
@@ -592,8 +613,47 @@
             && dir
             && *dir)
         {
+            numberOfWatchdirs++;
+            watchdir = tr_malloc(sizeof(dtr_watchdir*)*numberOfWatchdirs);
             tr_logAddInfo ("Watching \"%s\" for new .torrent files", dir);
-            watchdir = dtr_watchdir_new (mySession, dir, onFileAdded);
+            watchdir[0] = dtr_watchdir_new(mySession, dir, onFileAdded, NULL);
+
+            /* checking for _suffix matching of watchdir */ 
+            if(tr_variantDictFindBool( &settings, TR_KEY_watch_dir_suffix_enabled, &boolVal) && boolVal) 
+            { 
+                struct dirent **eps; 
+                int numberOfDirs; 
+                char * dirname = tr_dirname(dir); 
+                char * basename = tr_basename(dir); 
+
+                tr_logAddInfo( "Suffix watching \"%s\" for new .torrent files", dirname ); 
+                numberOfDirs = scandir (dirname, &eps, 0, alphasort); 
+                if(numberOfDirs>=1) 
+                { 
+                    int cnt; 
+                    for (cnt = 0; cnt < numberOfDirs; ++cnt) 
+                    { 
+                        if(strncmp(basename, eps[cnt]->d_name, strlen(basename)) == 0 && strlen(basename) < strlen(eps[cnt]->d_name)) 
+                        { 
+                            char * newDir = tr_buildPath(dirname, eps[cnt]->d_name, NULL); 
+                            dtr_watchdir ** watchdirReallocated; 
+                            tr_logAddInfo("Found directory \"%s\" as suffix directory of \"%s\"", eps[cnt]->d_name, basename); 
+                            numberOfWatchdirs++; 
+                            tr_logAddInfo( "Watching \"%s\" for new .torrent files", newDir ); 
+
+                            watchdirReallocated = tr_malloc(sizeof(dtr_watchdir*)*numberOfWatchdirs); 
+                            memcpy(watchdirReallocated, watchdir, sizeof(dtr_watchdir*)*(numberOfWatchdirs-1)); 
+                            tr_free(watchdir); 
+                            watchdir = watchdirReallocated; 
+                            watchdir[numberOfWatchdirs-1] = dtr_watchdir_new( mySession, newDir, onFileAdded, eps[cnt]->d_name + strlen(basename)); 
+                            tr_free(newDir); 
+                        } 
+                    } 
+                } 
+
+                tr_free(dirname); 
+                tr_free(basename); 
+           }
         }
     }
 
@@ -616,7 +676,7 @@
     /* Create new timer event to report daemon status */
     {
         struct timeval one_sec = { 1, 0 };
-        status_ev = event_new(ev_base, -1, EV_PERSIST, &periodicUpdate, watchdir);
+        status_ev = event_new(ev_base, -1, EV_PERSIST, periodicUpdate, watchdir);
         if (status_ev == NULL)
         {
             tr_logAddError("Failed to create status event %s", tr_strerror(errno));
@@ -650,7 +710,11 @@
     event_base_free(ev_base);
 
     tr_sessionSaveSettings (mySession, configDir, &settings);
-    dtr_watchdir_free (watchdir);
+    for(c=0; c<numberOfWatchdirs; c++)
+    {
+        dtr_watchdir_free( watchdir[c] );
+    }
+    tr_free(watchdir);
     tr_sessionClose (mySession);
     pumpLogMessages (logfile);
     printf (" done.\n");
diff -Naur transmission-2.84_/daemon/watch.c transmission-2.84/daemon/watch.c
--- transmission-2.84_/daemon/watch.c	2014-07-01 10:10:39.418913066 -0700
+++ transmission-2.84/daemon/watch.c	2015-10-03 20:15:00.878070332 -0700
@@ -33,6 +33,7 @@
     tr_session * session;
     char * dir;
     dtr_watchdir_callback * callback;
+    void *callbackArgument;
 #ifdef WITH_INOTIFY
     int inotify_fd;
 #else /* readdir implementation */
@@ -89,7 +90,7 @@
                 continue;
 
             tr_logAddInfo ("Found new .torrent file \"%s\" in watchdir \"%s\"", name, w->dir);
-            w->callback (w->session, w->dir, name);
+            w->callback (w->session, w->dir, name, w->callbackArgument);
         }
 
         closedir (odir);
@@ -138,7 +139,7 @@
             if (tr_str_has_suffix (name, ".torrent"))
             {
                 tr_logAddInfo ("Found new .torrent file \"%s\" in watchdir \"%s\"", name, w->dir);
-                w->callback (w->session, w->dir, name);
+                w->callback (w->session, w->dir, name, w->callbackArgument);
             }
             i += EVENT_SIZE +  event->len;
         }
@@ -243,13 +244,14 @@
 ***/
 
 dtr_watchdir*
-dtr_watchdir_new (tr_session * session, const char * dir, dtr_watchdir_callback * callback)
+dtr_watchdir_new (tr_session * session, const char * dir, dtr_watchdir_callback * callback, const void * callbackArgument)
 {
     dtr_watchdir * w = tr_new0 (dtr_watchdir, 1);
 
     w->session = session;
     w->dir = tr_strdup (dir);
     w->callback = callback;
+    w->callbackArgument = tr_strdup(callbackArgument); 
 
     watchdir_new_impl (w);
 
@@ -270,6 +272,7 @@
     {
         watchdir_free_impl (w);
         tr_free (w->dir);
+        tr_free( w->callbackArgument );
         tr_free (w);
     }
 }
diff -Naur transmission-2.84_/daemon/watch.h transmission-2.84/daemon/watch.h
--- transmission-2.84_/daemon/watch.h	2014-07-01 10:10:39.518913069 -0700
+++ transmission-2.84/daemon/watch.h	2015-10-03 20:15:00.879070320 -0700
@@ -12,9 +12,9 @@
 
 typedef struct dtr_watchdir dtr_watchdir;
 
-typedef void (dtr_watchdir_callback)(tr_session * session, const char * dir, const char * file);
+typedef void (dtr_watchdir_callback)(tr_session * session, const char * dir, const char * file, const void *argument);
 
-dtr_watchdir* dtr_watchdir_new (tr_session * session, const char * dir, dtr_watchdir_callback cb);
+dtr_watchdir* dtr_watchdir_new (tr_session * session, const char * dir, dtr_watchdir_callback cb, const void *callbackArgument);
 
 void dtr_watchdir_update (dtr_watchdir * w);
 
diff -Naur transmission-2.84_/libtransmission/quark.c transmission-2.84/libtransmission/quark.c
--- transmission-2.84_/libtransmission/quark.c	2014-07-01 10:08:59.402910689 -0700
+++ transmission-2.84/libtransmission/quark.c	2015-10-03 20:15:00.880070309 -0700
@@ -398,6 +398,7 @@
   { "warning message", 15 },
   { "watch-dir", 9 },
   { "watch-dir-enabled", 17 },
+  { "watch-dir-prefix-enabled", 17 },
   { "webseeds", 8 },
   { "webseedsSendingToUs", 19 }
 };
diff -Naur transmission-2.84_/libtransmission/quark.h transmission-2.84/libtransmission/quark.h
--- transmission-2.84_/libtransmission/quark.h	2014-07-01 10:08:59.402910689 -0700
+++ transmission-2.84/libtransmission/quark.h	2015-10-03 20:15:00.881070298 -0700
@@ -396,6 +396,7 @@
   TR_KEY_warning_message,
   TR_KEY_watch_dir,
   TR_KEY_watch_dir_enabled,
+  TR_KEY_watch_dir_suffix_enabled,
   TR_KEY_webseeds,
   TR_KEY_webseedsSendingToUs,
   TR_N_KEYS
